# Generated by Django 4.2.7 on 2025-10-02 02:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('rentals', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Overall rating from 1-5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='rating')),
                ('comment', models.TextField(help_text='Detailed review comment', max_length=1000, verbose_name='review comment')),
                ('cleanliness_rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Rating for property cleanliness', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='cleanliness rating')),
                ('location_rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Rating for property location', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='location rating')),
                ('value_rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Rating for value for money', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='value for money rating')),
                ('landlord_rating', models.PositiveIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Rating for landlord responsiveness and helpfulness', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='landlord rating')),
                ('title', models.CharField(blank=True, help_text='Optional short title for the review', max_length=200, verbose_name='review title')),
                ('pros', models.TextField(blank=True, help_text='What the reviewer liked about the property', max_length=500, verbose_name='pros')),
                ('cons', models.TextField(blank=True, help_text="What the reviewer didn't like about the property", max_length=500, verbose_name='cons')),
                ('move_in_date', models.DateField(blank=True, help_text='When the tenant moved into the property', null=True, verbose_name='move-in date')),
                ('move_out_date', models.DateField(blank=True, help_text='When the tenant moved out of the property', null=True, verbose_name='move-out date')),
                ('would_recommend', models.BooleanField(blank=True, help_text='Whether the tenant would recommend this property', null=True, verbose_name='would recommend')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this review has been verified by admin', verbose_name='verified review')),
                ('is_approved', models.BooleanField(default=True, help_text='Whether this review is approved for display', verbose_name='approved')),
                ('moderation_notes', models.TextField(blank=True, help_text='Internal notes for moderators', verbose_name='moderation notes')),
                ('landlord_response', models.TextField(blank=True, help_text='Response from the property landlord', max_length=1000, verbose_name='landlord response')),
                ('landlord_response_date', models.DateTimeField(blank=True, null=True, verbose_name='landlord response date')),
                ('helpful_votes', models.PositiveIntegerField(default=0, help_text='Number of users who found this review helpful', verbose_name='helpful votes')),
                ('total_votes', models.PositiveIntegerField(default=0, help_text='Total number of helpfulness votes', verbose_name='total votes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('rental', models.ForeignKey(help_text='The rental property being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='rentals.rental')),
                ('tenant', models.ForeignKey(help_text='The tenant who wrote this review', limit_choices_to={'user_type': 'tenant'}, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('spam', 'Spam or fake review'), ('inappropriate', 'Inappropriate content'), ('offensive', 'Offensive language'), ('personal', 'Personal attack'), ('irrelevant', 'Not relevant to property'), ('false', 'False information'), ('other', 'Other reason')], help_text='Reason for reporting this review', max_length=20, verbose_name='report reason')),
                ('description', models.TextField(blank=True, help_text='Additional details about the report', max_length=500, verbose_name='description')),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether this report has been resolved by admin', verbose_name='resolved')),
                ('admin_action', models.TextField(blank=True, help_text='Action taken by admin to resolve this report', verbose_name='admin action')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='resolved at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='reported at')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_reports', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'admin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_reports', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='reviews.review')),
            ],
            options={
                'verbose_name': 'Review Report',
                'verbose_name_plural': 'Review Reports',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['review'], name='reviews_rev_review__27ae74_idx'), models.Index(fields=['reporter'], name='reviews_rev_reporte_c82420_idx'), models.Index(fields=['is_resolved'], name='reviews_rev_is_reso_d36d0a_idx'), models.Index(fields=['created_at'], name='reviews_rev_created_16c7fc_idx')],
                'unique_together': {('review', 'reporter')},
            },
        ),
        migrations.CreateModel(
            name='ReviewHelpfulness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_helpful', models.BooleanField(help_text='Whether the user found the review helpful', verbose_name='is helpful')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='voted at')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpfulness_votes', to='reviews.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review Helpfulness Vote',
                'verbose_name_plural': 'Review Helpfulness Votes',
                'indexes': [models.Index(fields=['review'], name='reviews_rev_review__209121_idx'), models.Index(fields=['user'], name='reviews_rev_user_id_ab7920_idx')],
                'unique_together': {('review', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rental', 'is_approved'], name='reviews_rev_rental__bd6434_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['tenant'], name='reviews_rev_tenant__e574d8_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='reviews_rev_rating_2db6dd_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_verified'], name='reviews_rev_is_veri_f1ab6d_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='reviews_rev_created_bdcc91_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('rental', 'tenant')},
        ),
    ]
